name: Build and deploy Slender UI APP
on:
  push:
    branches:
      - stage
      - dev
      - develop
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-${{ github.ref_name}}-app
  SERVICE_NAME: ${{ secrets.SERVICE_NAME }}-${{ github.ref_name }}-app
  NAMESPACE: ${{ secrets.NAMESPACE_DEV }}
  GH_SECR: ${{ secrets.GH_SECR }}
  CLUSTER: ${{ secrets.CLUSTER }}
  LIMIT_CPU: "500m"
  LIMIT_MEMORY: "512Mi"
  HELM_REPOSITORY: "eq-lab/devops-helm-charts-deploy"

jobs:
  build-image-app:
    runs-on: ubuntu-latest
    outputs:
        output_tag: ${{ steps.tag_env.outputs.tag }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GH_USER }} 
          password: ${{ secrets.PAT }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,enable=true,priority=600,prefix=,suffix=-{{date 'YYYYMMDD'}}-{{sha}},event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - id: tag_env
        run: echo "tag=${{ env.DOCKER_METADATA_OUTPUT_VERSION }}"  >> $GITHUB_OUTPUT
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          build-args: |
            BUILD_CONTEXT=app
            ${{ vars.DEPLOY_ENVIRONMENT_DEV }}
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: 'testsleep'
        run: sleep 30
  

  deployment-app:
    needs: build-image-app
    runs-on: 'ubuntu-latest'
    steps:
    - uses: azure/setup-kubectl@v3
      with:
        version: 'v1.27.1'
      id: install
    - uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'
    - name: 'Clone Helm repository'
      uses: actions/checkout@v3
      with:
        repository: ${{ env.HELM_REPOSITORY }}
        ref: 'main'
        token: ${{ secrets.PAT }}  
    # - name: 'Prep extraEnv'
    #   run: |
    #       cat <<EOF >extraEnv.yml
    #       imagePullSecrets: [name: $GH_SECR ]
    #       EOF
    - name: Set Kubernetes Context
      uses: azure/k8s-set-context@v3
      with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}
          context: ${{ env.CLUSTER }}
    - name: Set imagePullSecret
      uses: azure/k8s-create-secret@v4
      with:
        namespace: ${{ env.NAMESPACE }}
        secret-name: ${{ env.GH_SECR }}
        container-registry-url: ${{ env.REGISTRY }}
        container-registry-username: ${{ secrets.GH_USER }}
        container-registry-password: ${{ secrets.PAT }}
      id: create-secret
    - name: 'deploy'
      run: |
        helm upgrade -i $SERVICE_NAME \
          -n $NAMESPACE \
          --set fullnameOverride=$SERVICE_NAME \
          --set service.enabled=true \
          --set image.repository=$REGISTRY \
          --set image.name=$REGISTRY/$IMAGE_NAME \
          --set image.tag=${{ needs.build-image-app.outputs.output_tag }} \
          --set resources.limits.cpu=$LIMIT_CPU \
          --set resources.limits.memory=$LIMIT_MEMORY \
          ./ 
    - name: 'virtualservice'
      run: |
          cat <<EOF >virtualservice.yml
          apiVersion: networking.istio.io/v1alpha3
          kind: VirtualService
          metadata:
            name: $SERVICE_NAME
            namespace: $NAMESPACE
          spec:
            gateways:
              - frontend-stage/frontend-stage
            hosts:
              - $SERVICE_NAME.dev.eq
              - $SERVICE_NAME.stage.eq
            http:
              - match:
                  - uri:
                      prefix: /
                route:
                  - destination:
                      host: $SERVICE_NAME
                      port:
                        number: 3000
          EOF
          kubectl apply -f virtualservice.yml